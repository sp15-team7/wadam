# .coderabbit.yaml
# yaml-language-server: $schema=https://coderabbit.ai/integrations/schema.v2.json

language: 'ko' # 리뷰 언어를 한국어로 설정

tone_instructions: |
  한국어로 답변하세요. 영어로 답변하지 마세요.
  프론트엔드 시니어 엔지니어처럼 말하십시오.
  실용적이고 직접적으로 피드백하며, 코드 변경이 필요한 이유와 해결 방안을 설명하세요.
  가독성과 DX, 장기 유지보수를 우선시합니다.
  성능 문제가 있을 경우 꼭 지적하세요.
  명확한 컨텍스트 기반 피드백 없이 PR을 승인하지 마십시오.

early_access: true
free_tier: false

reviews:
  profile: 'assertive'
  request_changes_workflow: true
  high_level_summary: true
  high_level_summary_placeholder: '@coderabbitai summary'
  high_level_summary_in_walkthrough: true
  auto_title_placeholder: '@coderabbitai'
  auto_title_instructions: 'PR 제목을 명확히 요약하세요.'
  review_status: true
  commit_status:
    pending: true
    success: true
    failure: true
  collapse_walkthrough: true
  changed_files_summary: true
  sequence_diagrams: true
  assess_linked_issues: true
  related_issues: true
  related_prs: true
  suggested_labels: true
  auto_apply_labels: true
  suggested_reviewers: true
  auto_assign_reviewers: true
  poem: false

  labeling_instructions: |
    - 버그 수정: bug
    - 기능 추가: feature
    - 리팩토링: refactor

  path_instructions:
    - path: 'src/feature/**/components/**/*.tsx'
      instructions: |
        - 불필요한 리렌더링 감지
        - React.memo 혹은 useMemo 등 메모이제이션 기회 제안
        - A11y(WAI-ARIA, 시맨틱 태그 등) 준수 여부 확인
        - 컴포넌트 크기/역할 적절성 검토

    - path: 'src/shared/components/**/*.tsx'
      instructions: |
        - 재사용성 높은 구조인지 검토
        - A11y(WAI-ARIA, 키보드 접근성 등) 준수 여부 확인
        - 메모이제이션 및 불필요한 상태/props 전달 여부 확인
        - UI 패턴 일관성 유지 여부 확인 (shadcn/ui, tailwind 기준)

    - path: 'src/feature/**/services/**/*.ts'
      instructions: |
        - API 호출 방식의 일관성 확인
        - 에러 핸들링 철저히 구성되어 있는지 점검
        - response/request 타입 안정성 보장 여부 확인
        - 비동기 처리 최적화 제안 (Promise.all 등 활용)

    - path: 'src/shared/libs/api/**/*.ts'
      instructions: |
        - API 클라이언트(ky 등)의 구성 방식 점검
        - 인터셉터, 에러 처리, 토큰 갱신 등 흐름 정확성 검토
        - 타입 추론 및 명시가 적절한지 확인
        - 확장성 있는 구조인지 피드백 제안

    - path: 'src/feature/**/schema/**/*.ts'
      instructions: |
        - zod 스키마 설계가 실제 요구사항과 일치하는지 확인
        - 유효성 검증 로직 누락 여부 확인
        - 추후 유지보수 용이성 확보를 위한 스키마 재사용성 검토

    - path: 'src/feature/**/hooks/**/*.ts'
      instructions: |
        - 커스텀 훅의 역할이 명확한지 확인
        - 훅 내 의존성 배열, useEffect 남용 여부 점검
        - zustand/react-query와의 적절한 분리 여부 검토

    - path: 'src/shared/hooks/**/*.ts'
      instructions: |
        - 범용 훅인지 명확히 드러나는 네이밍인지 확인
        - SSR/RSC 호환성 여부 고려
        - 장기적 관점에서 재사용 가능한지 평가

    - path: 'src/shared/utils/**/*.ts'
      instructions: |
        - 순수 함수 형태로 구현되었는지 점검
        - 단일 책임 원칙(SRP)에 맞는지 확인
        - 타입 유추 가능성과 안정성 보장 여부 확인

  path_filters:
    include:
      - 'src/**'
    exclude:
      - 'dist/**'
      - 'node_modules/**'

  abort_on_close: true
  disable_cache: false

  auto_review:
    enabled: true
    incremental: true
    ignore_title_keywords:
      - 'WIP'
      - 'DO NOT MERGE'
    labels:
      - 'ci-run'
    drafts: false
    base_branches:
      - 'main'
      - 'dev'

tools:
  ast-grep:
    essential_rules: true
    rule_dirs:
      - 'ast-rules'
  shellcheck:
    enabled: true
  yamllint:
    enabled: true
  gitleaks:
    enabled: true
  checkov:
    enabled: true
  eslint:
    enabled: true
  markdownlint:
    enabled: true
  actionlint:
    enabled: true
  # 기타 필요한 툴 추가 가능

chat:
  enabled: true
  auto_reply: true

docstrings:
  language: 'ko'
  path_instructions:
    - path: 'src/feature/**/*.ts'
      instructions: |
        - 함수, 클래스, 커스텀 훅의 역할과 사용법을 한국어로 명확히 기술
        - 파라미터/리턴값 설명 누락 여부 확인
        - 유의사항, side effect 존재 시 문서화 권장
        - 너무 추상적인 설명 지양, 예제를 통한 구체성 확보 권장

    - path: 'src/shared/**/*.ts'
      instructions: |
        - 재사용 가능한 유틸 함수의 목적, 입력/출력 설명 필수
        - 부작용(side effect) 여부 명시
        - 코드보다 문서가 더 직관적이어야 함

unit_tests:
  path_instructions: []
